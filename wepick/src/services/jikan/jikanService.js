import { JIKAN_GENRE_MAPPING } from "../../constants/genres.js";
const JIKAN_BASE_URL = "https://api.jikan.moe/v4";

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∂–∞–Ω—Ä—ã –≤ –∏—Ö Jikan ID.
 */
function genresToJikanIds(genresNames) {
  const validGenres = Array.isArray(genresNames) ? genresNames : [];

  return validGenres
    .map((name) => {
      const id = JIKAN_GENRE_MAPPING[name];
      if (id === undefined) {
        console.warn(`‚ö†Ô∏è Jikan genre mapping missing for: ${name}`);
      }
      return id;
    })
    .filter((id) => id);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–Ω–∏–º–µ —Å Jikan API –ø–æ –∂–∞–Ω—Ä–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º.
 * @param {Array<string>} likes - –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã
 * @param {Array<string>} dislikes - –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
 * @param {number} decade - –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000 –¥–ª—è 2000‚Äì2009)
 * @param {number} limit - –æ–±—â–∏–π –ª–∏–º–∏—Ç
 */
export async function fetchAnime(
  likes = [],
  dislikes = [],
  decade,
  limit = 60
) {
  console.log("fetchAnime params:", { likes, dislikes, decade });
  const genreIds = genresToJikanIds(likes);

  if (genreIds.length === 0) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∂–∞–Ω—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤");
    return [];
  }

  try {
    const results = [];

    // –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (Jikan –Ω–µ –ª—é–±–∏—Ç —Å–ø–∞–º)
    const limitedGenres = genreIds.slice(0, 5);

    // –î–µ–ª–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å 429 Too Many Requests)
    for (const id of limitedGenres) {
      const url = `${JIKAN_BASE_URL}/anime?order_by=score&sort=desc&limit=${Math.ceil(
        limit / limitedGenres.length
      )}&genres=${id}`;

      console.log("üîπ Requesting:", url);
      const response = await fetch(url);
      if (!response.ok) {
        console.error(
          `‚ùå Jikan API Error ${response.status}: ${response.statusText}`
        );
        continue;
      }

      const data = await response.json();
      if (Array.isArray(data.data)) {
        results.push(...data.data);
      }
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const unique = Array.from(
      new Map(results.map((a) => [a.mal_id, a])).values()
    );

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—é (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
    let filtered = unique;
    if (decade) {
      const endYear = decade + 9;
      filtered = unique.filter((a) => {
        const year =
          a.year ||
          (a.aired?.from ? new Date(a.aired.from).getFullYear() : null) ||
          a.aired?.prop?.from?.year;
        return year && year >= decade && year <= endYear;
      });
      console.log(
        `üìÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filtered.length} –∞–Ω–∏–º–µ (${decade}-${endYear})`
      );
    }

    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É
    return filtered.map((a) => ({
      id: a.mal_id,
      title: a.title_english || a.title || a.title_japanese,
      overview: a.synopsis || null,
      rating: a.score ?? null,
      poster: a.images?.webp?.image_url || a.images?.jpg?.image_url || null,
      year: a.year ?? null,
      source: "jikan",
      raw: a,
    }));
  } catch (error) {
    console.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∏–º–µ –∏–∑ Jikan API:", error);
    return [];
  }
}
