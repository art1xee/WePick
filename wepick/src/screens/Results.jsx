import React, { useEffect, useState } from "react";
import { getByGenres } from "../api/tmdb";

const labels = {
  ua: {
    title: "–ó—É—Å—Ç—Ä—ñ–Ω—å—Ç–µ —Å–≤–æ—é –∫—ñ–Ω–æ–ø–∞—Ä—É!",
    info_button: "–ë—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π..",
    more_button: "–ë–∞—á–∏–ª–∏ - –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—à–µ",
    loading: "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
    name: "–ù–∞–∑–≤–∞: ",
    no_results: "–ù–∞ –∂–∞–ª—å, –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏."
  },
  ru: {
    title: "–í—Å—Ç—Ä–µ—Ç—å—Ç–µ —Å–≤–æ—é –∫–∏–Ω–æ-–ø–∞—Ä—É!",
    info_button: "–ë–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π..",
    more_button: "–í–∏–¥–µ–ª–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ",
    loading: "–ó–∞–≥—Ä—É–∑–∫–∞...",
    name: "–ù–∞–∑–≤–∞–Ω–∏–µ: ",
    no_results: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
  },
  en: {
    title: "Meet your movie match!",
    info_button: "More details..",
    more_button: "Seen it - show another",
    loading: "Loading...",
    name: "Name: ",
    no_results: "Sorry, nothing found. Try different parameters."
  }
};

// –ú–∞–ø–ø–∏–Ω–≥ –∂–∞–Ω—Ä–æ–≤ –Ω–∞ TMDB ID
const GENRE_MAPPING = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∂–∞–Ω—Ä—ã
  "Action": 28, "–ë–æ–π–æ–≤–∏–∫": 28, "–ë–æ–µ–≤–∏–∫": 28,
  "Adventure": 12, "–ü—Ä–∏–≥–æ–¥–∏": 12, "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": 12,
  "Comedy": 35, "–ö–æ–º–µ–¥—ñ—è": 35, "–ö–æ–º–µ–¥–∏—è": 35,
  "Drama": 18, "–î—Ä–∞–º–∞": 18,
  "Romance": 10749, "–†–æ–º–∞–Ω—Ç–∏–∫–∞": 10749,
  "Fantasy": 14, "–§–µ–Ω—Ç–µ–∑—ñ": 14, "–§—ç–Ω—Ç–µ–∑–∏": 14,
  "Sci-Fi": 878, "–ù–∞—É–∫–æ–≤–∞ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": 878, "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": 878,
  "Mystery": 9648, "–ú—ñ—Å—Ç–∏–∫–∞ / –î–µ—Ç–µ–∫—Ç–∏–≤": 9648, "–ú–∏—Å—Ç–∏–∫–∞ / –î–µ—Ç–µ–∫—Ç–∏–≤": 9648,
  "Horror": 27, "–ñ–∞—Ö–∏": 27, "–£–∂–∞—Å—ã": 27,
  "Thriller": 53, "–¢—Ä–∏–ª–µ—Ä": 53, "–¢—Ä–∏–ª–ª–µ—Ä": 53,
  "Crime": 80, "–ö—Ä–∏–º—ñ–Ω–∞–ª": 80, "–ö—Ä–∏–º–∏–Ω–∞–ª": 80,
  "Family": 10751, "–°—ñ–º–µ–π–Ω–∏–π": 10751, "–°–µ–º–µ–π–Ω—ã–π": 10751,
  "Musical": 10402, "–ú—é–∑–∏–∫–ª": 10402,
  "Documentary": 99, "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π": 99, "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π": 99,
  "Western": 37, "–í–µ—Å—Ç–µ—Ä–Ω": 37,
  "War": 10752, "–í—ñ–π—Å—å–∫–æ–≤–∏–π": 10752, "–í–æ–µ–Ω–Ω—ã–π": 10752,
  "Historical": 36, "–Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π": 36, "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π": 36,
  "Sports": 9805, "–°–ø–æ—Ä—Ç": 9805,
};

export default function Results({ 
  movies, 
  onRestart, 
  lang = "ua",
  participants = [],
  contentType = "movie"
}) {
  const [tmdbResults, setTmdbResults] = useState([]);
  const [idx, setIdx] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true);
        setError(false);

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const allLikes = participants.flatMap(p => p.likes || []);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ –≤ TMDB ID
        const genreIds = [...new Set(
          allLikes
            .map(genre => GENRE_MAPPING[genre])
            .filter(id => id !== undefined)
        )];

        console.log('üé¨ Searching for genres:', allLikes);
        console.log('üé¨ TMDB Genre IDs:', genreIds);

        // –ï—Å–ª–∏ –Ω–µ—Ç –∂–∞–Ω—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
        if (genreIds.length === 0) {
          console.log('‚ö†Ô∏è No genre IDs found, fetching popular content');
          const res = await getPopularContent(contentType);
          setTmdbResults(res.results || []);
        } else {
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ –∂–∞–Ω—Ä–∞–º
          const res = await getByGenres(contentType, genreIds);
          console.log('‚úÖ TMDB Response:', res);
          
          if (res.results && res.results.length > 0) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–µ–∫–∞–¥–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            let filtered = res.results;
            
            const decades = participants
              .map(p => p.decade)
              .filter(d => d !== null && d !== undefined);
            
            if (decades.length > 0) {
              filtered = filtered.filter(movie => {
                const year = movie.release_date?.slice(0, 4);
                const movieDecade = Math.floor(year / 10) * 10;
                return decades.some(d => movieDecade === d || Math.abs(movieDecade - d) <= 10);
              });
            }
            
            setTmdbResults(filtered.length > 0 ? filtered : res.results);
          } else {
            setError(true);
          }
        }
      } catch (e) {
        console.error("‚ùå TMDB error:", e);
        setError(true);
      } finally {
        setLoading(false);
      }
    }
    
    fetchData();
  }, [participants, contentType]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (fallback)
  async function getPopularContent(type) {
    const url = `https://api.themoviedb.org/3/discover/${type}`;
    const params = new URLSearchParams({
      api_key: import.meta.env.VITE_TMDB_KEY,
      sort_by: 'popularity.desc',
      page: '1'
    });
    
    const res = await fetch(`${url}?${params}`);
    if (!res.ok) throw new Error("TMDB fetch error");
    return await res.json();
  }

  if (loading) {
    return (
      <div className="result-screen">
        <p>{labels[lang].loading}</p>
      </div>
    );
  }

  if (error || !tmdbResults.length) {
    return (
      <div className="result-screen">
        <h2 className="result-title">üòî</h2>
        <p>{labels[lang].no_results}</p>
        <button onClick={onRestart} className="btn-reset" style={{ marginTop: 20 }}>
          {lang === 'ua' ? '–ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É' : lang === 'ru' ? '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞' : 'Start over'}
        </button>
      </div>
    );
  }

  const current = tmdbResults[idx];
  const next = () => setIdx((i) => (i + 1) % tmdbResults.length);

  return (
    <div className="result-screen">
      <h2 className="result-title">{labels[lang].title}</h2>
      <h3 className="result-name">
        {labels[lang].name}
        {current.title || current.name} ({(current.release_date || current.first_air_date)?.slice(0, 4)})
      </h3>
      
      {current.poster_path ? (
        <img
          src={`https://image.tmdb.org/t/p/w500${current.poster_path}`}
          alt={current.title || current.name}
          style={{ borderRadius: 12, maxWidth: "40%", marginBottom: 10 }}
        />
      ) : (
        <div className="poster-placeholder">
          {lang === 'ua' ? '–ù–µ–º–∞—î –ø–æ—Å—Ç–µ—Ä–∞' : lang === 'ru' ? '–ù–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞' : 'No poster'}
        </div>
      )}
      
      <div style={{ marginTop: 10 }}>
        <a
          href={`https://www.themoviedb.org/${contentType}/${current.id}`}
          target="_blank"
          rel="noreferrer"
          className="btn-info"
        >
          {labels[lang].info_button}
        </a>
        <button onClick={next} className="btn-more" style={{ marginLeft: 8 }}>
          {labels[lang].more_button}
        </button>
      </div>
    </div>
  );
}